import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import org.apache.commons.lang3.StringUtils
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.springdoc.openapi.gradle.plugin.OpenApiGeneratorTask

plugins {
    id 'com.github.johnrengelman.processes' version '0.5.0' // needed for oas autogeneration
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3' //autogenerate OAS spec
    id 'org.openapi.generator' version '5.3.0' //autogenerator for clients
    id 'com.bmuschko.docker-remote-api'
    id 'org.springframework.boot' version '2.6.0'
}
loadScript('integrationTests')
loadScript('testing')

dependencies {
    implementation project(":api")
    implementation project(":backend")

    implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.5.12'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2:2.0.206'
    runtimeOnly 'org.postgresql:postgresql:42.3.1'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly platform("org.springframework.boot:spring-boot-dependencies:${project.ext.springBootVersion}")

}

def dockerImage = "${project.ext.dockerRepo}/${rootProject.name}:${project.version}"
// Use task types
task dockerBuild(type: DockerBuildImage) { DockerBuildImage it ->
    group = 'docker'
    description "Builds the Docker image and adds a registry aware tag"
    inputDir = rootProject.projectDir
    images.add(dockerImage)
    images.add("${rootProject.name}:${project.version}")
    quiet = false
    remove = true
}
task dockerBuildLocal(type: DockerBuildImage) { DockerBuildImage it ->
    group = 'docker'
    description "Builds a docker image and tags it with :local"
    inputDir = rootProject.projectDir
    images.add("${rootProject.name}:local")
    quiet = false
    remove = true
}
task dockerPush(type: DockerPushImage) {
    group = 'docker'
    images.add(dockerImage)
    registryCredentials {
        username = project.ext.dockerRepoUser
        password = System.getenv('DOCKER_REPO_KEY')
        url = project.ext.dockerRepoUrl
        email = project.ext.dockerRepoUserEmail
    }
    dependsOn dockerBuild
}

// apply client generation
project.ext {
    generatorTask = GenerateTask
    oasTask = OpenApiGeneratorTask
}
apply from: "clients.gradle"

// minor config
jacocoTestCoverageVerification {
    enabled false
}

openApi {
    outputDir.set(rootDir)
}

docker {
    if (!StringUtils.isBlank(System.getenv("DOCKER_HOST")))
        url = System.getenv("DOCKER_HOST")
}