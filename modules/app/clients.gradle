task autogenClients() {
    group "clients"
}

void createGenerator(String lang, Map<String, Object> config) {
    tasks.create("generate_${lang}_client", project.ext.generatorTask) {
        group = "clients"
        generatorName = lang
        outputDir = "$rootDir/client/$lang"
        inputSpec = "$rootDir/openapi.json"
        var configOptions = [
                apiPackage                 : "${project.ext.client.rootPackage}.api",
                invokerPackage             : "${project.ext.client.rootPackage}.client",
                packageName                : project.ext.client.rootPackage,
                modelPackage               : "${project.ext.client.rootPackage}.models",
                packageName                : "${project.ext.artifactName}.Client",
                packageVersion             : project.version,
                prependFormOrBodyParameters: true.toString(),
                projectName                : project.ext.client.id
        ]
        configOptions.putAll(config)
        dependsOn tasks.withType(project.ext.oasTask)

        var isRequired = project.ext.clients.containsKey(lang) && project.ext.clients[lang]
        if (isRequired) {
            tasks.autogenClients.dependsOn it
        }
    }

}

createGenerator("java", [
        dateLibrary        : "java8",
        serializableModel  : "true",
        artifactDescription: ext.client.description,
        artifactId         : ext.client.id,
        artifactVersion    : project.version,
        groupId            : project.ext.rootPackage
])
createGenerator("c", [:])
createGenerator("android", [
        serializableModel  : "true",
        artifactDescription: ext.client.description,
        artifactId         : ext.client.id,
        artifactVersion    : project.version,
        groupId            : project.ext.rootPackage
])
createGenerator("cpp-tizen", [
        variableNameFirstCharacterUppercase: "false"
])
createGenerator("csharp-netcore", [
        netCoreProjectFile    : "true",
        nullableReferenceTypes: "true",
        targetFramework       : "netcoreapp3.0"
])
createGenerator("dart", [
        pubAuthor     : ext.author,
        pubDescription: ext.client.description,
        pubName       : ext.client.name,
        pubLibrary    : ext.client.id,
        pubVersion    : project.version
])
createGenerator("go", [:])
createGenerator("php", [
        variableNamingConvention: "camelCase"
])
createGenerator("python", [:])
createGenerator("rust", [:])
createGenerator("swift5", [
        apiNamePrefix : "Api",
        podDescription: ext.client.description,
        podVersion    : project.version
])
def typescriptConfig = [
        modelPropertyNaming    : "camelCase",
        npmName                : ext.client.id,
        nullSafeAdditionalProps: "true"
]
createGenerator("typescript-angular", typescriptConfig)
createGenerator("typescript-node", typescriptConfig)
createGenerator("typescript-rxjs", typescriptConfig)