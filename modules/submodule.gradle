apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

println "Configure ${project.name}"

sourceSets {
    archTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
configurations {
    archTestImplementation.extendsFrom implementation
    archTestRuntimeOnly.extendsFrom runtimeOnly
}
dependencies {
    compileOnly 'org.junit.jupiter:junit-jupiter-api:5.7.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testRuntimeOnly "org.junit.platform:junit-platform-commons:1.8.+"
    archTestImplementation 'com.tngtech.archunit:archunit:0.22.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}
repositories {
    mavenCentral()
}


task archTest(type: Test) {
    description = 'Runs architectural tests.'
    group = 'verification'

    testClassesDirs = sourceSets.archTest.output.classesDirs
    classpath = sourceSets.archTest.runtimeClasspath
    useJUnitPlatform()
}
sonarqube {
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir/build/reports/jacoco/coverage.xml"
    }
}


subprojects {
    apply from: "${rootDir}/modules/submodule.gradle"
}

tasks.withType(Javadoc) {
    failOnError = false
}

tasks.create("testJar", Jar.class) {
    from sourceSets.test.output
}
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = project.ext.minCoverage
            }
        }
    }
}

tasks.jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        xml.destination layout.buildDirectory.file("reports/jacoco/coverage.xml").get().asFile
        csv.enabled false
        html.destination layout.buildDirectory.dir("reports/jacoco/html").get().asFile
    }
}
tasks.check {
    finalizedBy tasks.jacocoTestCoverageVerification
}
jacoco {
    toolVersion = "0.8.5"
}
tasks.test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport // report is always generated after tests run
}
task testAll{
    group 'verification'
    dependsOn tasks.test
    dependsOn tasks.archTest
}