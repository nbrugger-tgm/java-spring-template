apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

println "Configure ${project.name}"

sonarqube {
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir/build/reports/jacoco/coverage.xml"
    }
}

repositories {
    mavenCentral()
}

subprojects {
    apply from: "${rootDir}/submodule.gradle"
}

dependencies {
    compileOnly 'org.junit.jupiter:junit-jupiter-api:5.7.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(Javadoc) {
    failOnError = false
}

tasks.create("testJar", Jar.class) {
    from sourceSets.test.output
}
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = project.ext.minCoverage
            }
        }
    }
}

tasks.jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        xml.destination layout.buildDirectory.file("reports/jacoco/coverage.xml").get().asFile
        csv.enabled false
        html.destination layout.buildDirectory.dir("reports/jacoco/html").get().asFile
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/*Test.class" //exclude abstract tests in main package
            ])
        }))
    }
}
tasks.check {
    finalizedBy tasks.jacocoTestCoverageVerification
}
jacoco {
    toolVersion = "0.8.5"
}
tasks.test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport // report is always generated after tests run
}