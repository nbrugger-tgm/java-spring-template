# Note that this is only a very simple way to deploy
# Adapt this file as much as you want there are many options to deploy a docker compose
# AWS ECS
# Kubernetes & Helm
# Heroku
# (maybe) linode

# --- Steps to take ---
# 1. Install docker on the remote host
# 1.2 `docker network create --driver bridge public`
# 1.3 `docker network create --driver bridge project-name_dev_internal`
# 1.4 `docker network create --driver bridge project-name_staging_internal`
# 1.5 `docker network create --driver bridge project-name_prod_internal`
# 1.6 `docker network create --driver bridge project-name_dev_data`
# 1.7 `docker network create --driver bridge project-name_staging_data`
# 1.8 `docker network create --driver bridge project-name_prod_data`
# 2. generate a SSH key (rsa in this example)
# 3. echo `cat ~/.ssh/id_rsa.pub` >> ~/.ssh/authorized_keys
# 4. chmod 600 ~/.ssh/authorized_keys
# 5. Copy the contents of the private key (~/.ssh/id_rsa) and add it as secret (SSH_KEY) in github
# --- Steps to take ---

name: "deploy application"
description: "deploys your application to a server using SSH and Docker"

inputs:
  deployment:
    description: "the name of the folder to deploy"
    required: true
  target_host:
    description: "the host to deploy to (user@host)"
    required: true
    
runs:
  using: composite
  steps:
    - name: Add SSH key
      run: echo "${{ secrets.SSH_KEY }}" >> ~/.ssh/deploy_key
      shell: bash
    - name: Add SSH key permissions
      run: chmod 600 ~/.ssh/deploy_key
      shell: bash
    - name: Set up Docker
      run: |
        export DOCKER_HOST="ssh://${{inputs.target_host}}"
      shell: bash
    - name: docker up
      uses: ./.github/actions/gradle
      with:
        task: deploy_${{inputs.deployment}}